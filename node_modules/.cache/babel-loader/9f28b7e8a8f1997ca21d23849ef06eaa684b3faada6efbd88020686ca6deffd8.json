{"ast":null,"code":"//if you want to interpret any js code inside react code then put that js code inside curly braces like this {contacts.map()} here contacts.map() is a js code\nimport React from\"react\";import ReactDOM from\"react-dom/client\";import\"./index.css\";import App from\"./App\";import reportWebVitals from\"./reportWebVitals\";//importing jsx file to write inside html code\nimport Keeperapp from\"./React Components/keeperapp\";import Cards from\"./React Components/props\";import Main from\"./React Components/Main\";import Contacts from\"./React Components/contacts\";import Emojimain from\"./Challenge1/Emojimain\";import Loginmain from\"./Loginpage/loginmain\";import Hooks from\"./React Components/hooks\";import FormsNew from\"./React Components/forms\";import Heading from\"./React Components/Heading.jsx\";import pi,{doublepi,triplepi}from\"./React Components/pi.jsx\";////!  or you can write// import * as pi from \"./components/pi\";\n// const root = ReactDOM.createRoot(document.getElementById('root'));\n// const root = ReactDOM.createRoot(document.getElementById('root'));\n// // jsx doesn't allow expressions , coz they evaluate something , instead they allow statements\n// //watch a video on expressions vs statements\n// <h1>Hello dear {`${fnmae} ${lname}`}</h1> \n// root.render(  \n//   <div>\n//     <App />\n//   </div>\n// );\n// reportWebVitals();\n// ////! styling\n// const img=\"https://picsum.photos/200\";\n// // learnt applying custom style in jsx\n// ////! timing problem\n// const root = ReactDOM.createRoot(document.getElementById(\"root\"))\n// const date= new Date(2023,19,2,16);  //year,month,day,hour\n// const currenttime = date.getHours();\n// let greeting;\n// if(currenttime < 12){\n//   greeting=\"good morning\"\n// }\n// else if(currenttime < 18){\n//   greeting = \"good afternoon\"\n// }\n// else{\n//   greeting = \"good night\"\n// }\n// root.render(\n//   <div>\n//     <h1 className='header'>Hello world</h1>\n//     <Heading/>\n//     <ul>\n//       <li style={{color: \"red\"}}>Home</li>\n//       <li>About and {pi.default}</li>\n//       <li>Services and {pi.doublepi()}</li>\n//       <li>Contact us and {pi.triplepi()}</li>\n//       <br></br>\n//       <img src={img + \"?grayscale\"} />\n//     </ul>\n//     <h1>{greeting}</h1>\n//   </div>\n// );\n// ////!<-----------------------------------    NOW WE WILL START CODE FOR KEEPER PROJECT  -------------------------------------->\n// import Footer from \"./React Components/Footer\";\n// import Note from \"./React Components/Note\";\n// const root = ReactDOM.createRoot(document.getElementById('root'));\n// root.render(\n//   <div>\n//   <Heading />\n//   <Note title=\"Props\" content=\"created by props\"  />\n//   <Footer />\n//   </div>\n// );\n////! <-------------------------------------- Props ----------------------------------7----------------->\n////! props\n////! react props are same as html attributes just there is a bit difference of syntax\n// const root = ReactDOM.createRoot(document.getElementById('root'));\n// root.render(\n//   <div>\n//   <Main />\n// </div>\n// );\n// reportWebVitals();\n////! <-------------------------------------- Props ----------------------------------7----------------->\n////! props project for challenge1\n// const root = ReactDOM.createRoot(document.getElementById(\"root\"));\n// root.render(\n//   <div>\n//     <Emojimain />\n//   </div>\n// );\n// reportWebVitals();\n////! 08-03-2023\n////! <-------------------------------------- map , filter , reduce , arrow functions----------------------------------7----------------->\n// //filter :\n// const newarray=[2,5,78,55,33,90];\n// console.log(\"Filtered elements are : \" + newarray.filter(x => x>10));\n// // forEach :\n// var newnumber=[];\n// const newone = newarray.forEach(x => newnumber.push(x * 2))\n// console.log(newone); \n// //map :\n// const newarray3=[2,5,78,55,33,90];\n// console.log(\"mapped elements are : \" + newarray3.map( x => x*3));\n// //reduce : to accumulate something inside array\n// // .reduce works as loop function which loops the function inside it\n// const numbers=[2,4,56,77,36,87];\n// console.log(\"sum of numbers array is : \" + numbers.reduce((accumulator , currentnumber) => {\n//   console.log(\"accumulator is : \" + accumulator);\n//   console.log(\"currentnumber is : \" + currentnumber);\n//   console.log(\"hello there\");\n//   return accumulator + currentnumber\n// }))\n// //find , findindex : finds the  first item only that matches the given condition in array and findindex finds the first index\n// const newarray4=[4,5,10,11,34,23];\n// console.log(\"element greater than 10 is : \" + newarray4.find( x => x>10));\n// console.log(\"elements index greater than 10 is : \"+ newarray4.findIndex( x => x>10));\n//// ! 09-03-2023\n//// ! <-------------------------------------- ternary operator and &&--------------------------------------------------->\n//Expressions can be assigned or used as operands, while statements can only be declared.\n//Statements create side effects to be useful, while expressions are values or execute to values.\n//ternary operator turns an statement into expression by using it's syntax\n//syntax : \n//condition ? do if true : do if false\n//for using && you can wrote the above line as :\n//condition && Expression\n//True && Expression\n//False && Expression4\n// const root = ReactDOM.createRoot(document.getElementById(\"root\"));\n// root.render(\n//   <div>\n//     <Loginmain />\n//   </div>\n// );\n// reportWebVitals();\n// declarative vs imperative programming\n//declararive prog - the use of ternary operators , states , hooks\n//imperative programming -the use of pure js like :  document.getelementbyid(\"root\").innerHTML\n// ! 10-03-2023\n// ! <-------------------------------------- React States and Hooks--------------------------------------------------->\n// //? UI = f(state)\n////?react hooks must be called inside an component meaning like an different file than main file\n// //this method is not optimal to increase the value on screen \n// var count=0;\n// function increase(){\n//   count++;\n// const root = ReactDOM.createRoot(document.getElementById(\"root\"));\n// root.render(\n//   <div>\n//   <h1>{count}</h1>  \n//   <button onClick={increase}>+</button>\n// </div>,\n// );\n// reportWebVitals();\n// }\n// const root = ReactDOM.createRoot(document.getElementById(\"root\"));\n// root.render(\n//   <div>\n//   <h1>{count}</h1>  \n//   <button onClick={increase}>+</button>\n// </div>,\n// );\n// reportWebVitals();\n// //so we use hooks for an optimal way\n// const root = ReactDOM.createRoot(document.getElementById(\"root\"));\n// root.render(\n//   <div>\n//   <Hooks />\n// </div>,\n// );\n// reportWebVitals();\n//for time problem part2 in video 31 use method : setinterval(functionname , 1000ms )q\n// ! 11-03-2023\n// ! <--------------------------------------Destructuring , event handling , react forms--------------------------------------------------->\n//Destructuring\n//  const [count, setcount] = React.useState(0);\n// //*you can further create object literal :\n// const {countno, conunname} = count;\n// //*you can further give names of the objects literal\n// const {countno : num1 ,countname : string} = count;\n// //*you can further provide value of the objects which it will take in action if the object's value is undefined \n// const {countno = \"433\" ,countname = \"dhaval\"} = count;\n// //*if there is another object inside an object do this:\n//  const {countno, conuntime , counname : {fname,lname} } = count;\n//  const [cat,dog] =animals;\n// //  destructure an object named cat\n//  const {name =\"fluffy\" , sound=\"meow\"} = cat\n// function useAnimals(animals){\n//   return [\n//     animals.name,\n//     function(){\n//         console.log(animals.sound);\n//     }\n//   ] ;\n// }\n// console.log(\"hello\")\n// // const [animal,makesound] =useAnimals(cat)\n// console.log(animal) \n// // --> cat\n// // makesound() --> prints meow\n// //Event Handling\n// //React Forms\n// // console.log(event.target.value);\nimport Form from\"./React Components/complexstate\";import Todolist from\"./React Components/todolist\";import Todoitem from\"./React Components/todoitem.jsx\";import Form1 from\"./React Components/complexstate\";import{jsx as _jsx}from\"react/jsx-runtime\";var root=ReactDOM.createRoot(document.getElementById(\"root\"));root.render(/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(Keeperapp,{})}));// const root = ReactDOM.createRoot(document.getElementById(\"root\"))\n// root.render(\n//   <div>\n//     <FormsNew />\n//   </div>  \n// )\nreportWebVitals();//? revision of react - video 36 i am doing hooks vs classes\n///!instead of making components in function you can make classes \n//!format of class is \n// class App extends React.Component{\n//   render(){\n//   }\n// }\n// ! 12-03-2023\n// ! <--------------------------------------Revision Complex state , spread operator , component tree--------------------------------------------------->\n//you will find the above concepts in complexstate.jsx , todolist.jsx , todoitem.jsx , hooks.jsx\n// ! 13-03-2023\n// ! <--------------------------------------Revision Complex state , spread operator , component tree--------------------------------------------------->\n// const root = ReactDOM.createRoot(document.getElementById('root'));\n// root.render(\n//   <div>\n//   <Keeperapp />\n//   </div>\n// );\n// reportWebVitals();","map":{"version":3,"names":["React","ReactDOM","App","reportWebVitals","Keeperapp","Cards","Main","Contacts","Emojimain","Loginmain","Hooks","FormsNew","Heading","pi","doublepi","triplepi","Form","Todolist","Todoitem","Form1","root","createRoot","document","getElementById","render"],"sources":["C:/Users/rupap/.vscode/reactapp/src/index.js"],"sourcesContent":["//if you want to interpret any js code inside react code then put that js code inside curly braces like this {contacts.map()} here contacts.map() is a js code\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\n//importing jsx file to write inside html code\r\nimport Keeperapp from \"./React Components/keeperapp\";\r\nimport Cards from \"./React Components/props\";\r\nimport Main from \"./React Components/Main\";\r\nimport Contacts from \"./React Components/contacts\";\r\nimport Emojimain from \"./Challenge1/Emojimain\";\r\nimport Loginmain from \"./Loginpage/loginmain\";\r\nimport Hooks from \"./React Components/hooks\";\r\nimport FormsNew from \"./React Components/forms\";\r\nimport Heading from \"./React Components/Heading.jsx\"\r\nimport pi , {doublepi,triplepi} from \"./React Components/pi.jsx\";\r\n////!  or you can write// import * as pi from \"./components/pi\";\r\n\r\n// const root = ReactDOM.createRoot(document.getElementById('root'));\r\n// const root = ReactDOM.createRoot(document.getElementById('root'));\r\n// // jsx doesn't allow expressions , coz they evaluate something , instead they allow statements\r\n// //watch a video on expressions vs statements\r\n// <h1>Hello dear {`${fnmae} ${lname}`}</h1> \r\n// root.render(  \r\n//   <div>\r\n//     <App />\r\n//   </div>\r\n// );\r\n// reportWebVitals();\r\n// ////! styling\r\n// const img=\"https://picsum.photos/200\";\r\n\r\n// // learnt applying custom style in jsx\r\n\r\n// ////! timing problem\r\n\r\n// const root = ReactDOM.createRoot(document.getElementById(\"root\"))\r\n// const date= new Date(2023,19,2,16);  //year,month,day,hour\r\n// const currenttime = date.getHours();\r\n// let greeting;\r\n\r\n// if(currenttime < 12){\r\n//   greeting=\"good morning\"\r\n// }\r\n// else if(currenttime < 18){\r\n//   greeting = \"good afternoon\"\r\n// }\r\n// else{\r\n//   greeting = \"good night\"\r\n// }\r\n\r\n// root.render(\r\n//   <div>\r\n//     <h1 className='header'>Hello world</h1>\r\n//     <Heading/>\r\n//     <ul>\r\n//       <li style={{color: \"red\"}}>Home</li>\r\n//       <li>About and {pi.default}</li>\r\n//       <li>Services and {pi.doublepi()}</li>\r\n//       <li>Contact us and {pi.triplepi()}</li>\r\n//       <br></br>\r\n//       <img src={img + \"?grayscale\"} />\r\n//     </ul>\r\n\r\n//     <h1>{greeting}</h1>\r\n//   </div>\r\n// );\r\n\r\n\r\n\r\n// ////!<-----------------------------------    NOW WE WILL START CODE FOR KEEPER PROJECT  -------------------------------------->\r\n// import Footer from \"./React Components/Footer\";\r\n// import Note from \"./React Components/Note\";\r\n// const root = ReactDOM.createRoot(document.getElementById('root'));\r\n\r\n// root.render(\r\n//   <div>\r\n//   <Heading />\r\n//   <Note title=\"Props\" content=\"created by props\"  />\r\n//   <Footer />\r\n//   </div>\r\n// );\r\n\r\n\r\n\r\n////! <-------------------------------------- Props ----------------------------------7----------------->\r\n////! props\r\n////! react props are same as html attributes just there is a bit difference of syntax\r\n\r\n// const root = ReactDOM.createRoot(document.getElementById('root'));\r\n\r\n// root.render(\r\n//   <div>\r\n//   <Main />\r\n// </div>\r\n// );\r\n\r\n// reportWebVitals();\r\n\r\n\r\n\r\n\r\n////! <-------------------------------------- Props ----------------------------------7----------------->\r\n////! props project for challenge1\r\n\r\n// const root = ReactDOM.createRoot(document.getElementById(\"root\"));\r\n\r\n// root.render(\r\n//   <div>\r\n//     <Emojimain />\r\n//   </div>\r\n// );\r\n\r\n// reportWebVitals();\r\n\r\n\r\n\r\n////! 08-03-2023\r\n////! <-------------------------------------- map , filter , reduce , arrow functions----------------------------------7----------------->\r\n\r\n// //filter :\r\n// const newarray=[2,5,78,55,33,90];\r\n\r\n// console.log(\"Filtered elements are : \" + newarray.filter(x => x>10));\r\n\r\n\r\n// // forEach :\r\n// var newnumber=[];\r\n// const newone = newarray.forEach(x => newnumber.push(x * 2))\r\n// console.log(newone); \r\n\r\n\r\n\r\n// //map :\r\n// const newarray3=[2,5,78,55,33,90];\r\n\r\n// console.log(\"mapped elements are : \" + newarray3.map( x => x*3));\r\n\r\n\r\n// //reduce : to accumulate something inside array\r\n// // .reduce works as loop function which loops the function inside it\r\n// const numbers=[2,4,56,77,36,87];\r\n// console.log(\"sum of numbers array is : \" + numbers.reduce((accumulator , currentnumber) => {\r\n//   console.log(\"accumulator is : \" + accumulator);\r\n//   console.log(\"currentnumber is : \" + currentnumber);\r\n//   console.log(\"hello there\");\r\n//   return accumulator + currentnumber\r\n// }))\r\n\r\n// //find , findindex : finds the  first item only that matches the given condition in array and findindex finds the first index\r\n// const newarray4=[4,5,10,11,34,23];\r\n// console.log(\"element greater than 10 is : \" + newarray4.find( x => x>10));\r\n// console.log(\"elements index greater than 10 is : \"+ newarray4.findIndex( x => x>10));\r\n\r\n\r\n\r\n//// ! 09-03-2023\r\n//// ! <-------------------------------------- ternary operator and &&--------------------------------------------------->\r\n\r\n//Expressions can be assigned or used as operands, while statements can only be declared.\r\n//Statements create side effects to be useful, while expressions are values or execute to values.\r\n\r\n//ternary operator turns an statement into expression by using it's syntax\r\n//syntax : \r\n//condition ? do if true : do if false\r\n\r\n//for using && you can wrote the above line as :\r\n//condition && Expression\r\n//True && Expression\r\n//False && Expression4\r\n// const root = ReactDOM.createRoot(document.getElementById(\"root\"));\r\n\r\n// root.render(\r\n//   <div>\r\n//     <Loginmain />\r\n//   </div>\r\n// );\r\n\r\n// reportWebVitals();\r\n\r\n\r\n// declarative vs imperative programming\r\n//declararive prog - the use of ternary operators , states , hooks\r\n//imperative programming -the use of pure js like :  document.getelementbyid(\"root\").innerHTML\r\n\r\n\r\n\r\n\r\n// ! 10-03-2023\r\n// ! <-------------------------------------- React States and Hooks--------------------------------------------------->\r\n// //? UI = f(state)\r\n\r\n////?react hooks must be called inside an component meaning like an different file than main file\r\n// //this method is not optimal to increase the value on screen \r\n// var count=0;\r\n\r\n// function increase(){\r\n//   count++;\r\n// const root = ReactDOM.createRoot(document.getElementById(\"root\"));\r\n// root.render(\r\n//   <div>\r\n//   <h1>{count}</h1>  \r\n//   <button onClick={increase}>+</button>\r\n// </div>,\r\n// );\r\n// reportWebVitals();\r\n// }\r\n\r\n// const root = ReactDOM.createRoot(document.getElementById(\"root\"));\r\n// root.render(\r\n//   <div>\r\n//   <h1>{count}</h1>  \r\n//   <button onClick={increase}>+</button>\r\n// </div>,\r\n// );\r\n// reportWebVitals();\r\n// //so we use hooks for an optimal way\r\n// const root = ReactDOM.createRoot(document.getElementById(\"root\"));\r\n// root.render(\r\n//   <div>\r\n//   <Hooks />\r\n// </div>,\r\n// );\r\n// reportWebVitals();\r\n//for time problem part2 in video 31 use method : setinterval(functionname , 1000ms )q\r\n\r\n\r\n\r\n// ! 11-03-2023\r\n// ! <--------------------------------------Destructuring , event handling , react forms--------------------------------------------------->\r\n//Destructuring\r\n\r\n  //  const [count, setcount] = React.useState(0);\r\n\r\n  // //*you can further create object literal :\r\n  // const {countno, conunname} = count;\r\n\r\n  // //*you can further give names of the objects literal\r\n  // const {countno : num1 ,countname : string} = count;\r\n\r\n  // //*you can further provide value of the objects which it will take in action if the object's value is undefined \r\n  // const {countno = \"433\" ,countname = \"dhaval\"} = count;\r\n\r\n  // //*if there is another object inside an object do this:\r\n    //  const {countno, conuntime , counname : {fname,lname} } = count;\r\n    //  const [cat,dog] =animals;\r\n    // //  destructure an object named cat\r\n    //  const {name =\"fluffy\" , sound=\"meow\"} = cat\r\n\r\n    // function useAnimals(animals){\r\n    //   return [\r\n    //     animals.name,\r\n    //     function(){\r\n    //         console.log(animals.sound);\r\n    //     }\r\n    //   ] ;\r\n    // }\r\n    // console.log(\"hello\")\r\n    // // const [animal,makesound] =useAnimals(cat)\r\n    // console.log(animal) \r\n    // // --> cat\r\n    // // makesound() --> prints meow\r\n// //Event Handling\r\n\r\n// //React Forms\r\n// // console.log(event.target.value);\r\n\r\nimport Form from \"./React Components/complexstate\";\r\nimport Todolist from \"./React Components/todolist\";\r\nimport Todoitem from \"./React Components/todoitem.jsx\";\r\nimport Form1 from \"./React Components/complexstate\";\r\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\r\n\r\nroot.render(\r\n  <div>\r\n    <Keeperapp />\r\n  </div>\r\n);\r\n\r\n// const root = ReactDOM.createRoot(document.getElementById(\"root\"))\r\n// root.render(\r\n//   <div>\r\n//     <FormsNew />\r\n//   </div>  \r\n// )\r\nreportWebVitals();\r\n\r\n//? revision of react - video 36 i am doing hooks vs classes\r\n///!instead of making components in function you can make classes \r\n//!format of class is \r\n// class App extends React.Component{\r\n//   render(){\r\n\r\n//   }\r\n// }\r\n\r\n// ! 12-03-2023\r\n// ! <--------------------------------------Revision Complex state , spread operator , component tree--------------------------------------------------->\r\n//you will find the above concepts in complexstate.jsx , todolist.jsx , todoitem.jsx , hooks.jsx\r\n\r\n\r\n\r\n// ! 13-03-2023\r\n// ! <--------------------------------------Revision Complex state , spread operator , component tree--------------------------------------------------->\r\n// const root = ReactDOM.createRoot(document.getElementById('root'));\r\n\r\n// root.render(\r\n//   <div>\r\n//   <Keeperapp />\r\n//   </div>\r\n// );\r\n// reportWebVitals();\r\n\r\n"],"mappings":"AAAA;AACA,MAAOA,MAAK,KAAM,OAAO,CACzB,MAAOC,SAAQ,KAAM,kBAAkB,CACvC,MAAO,aAAa,CACpB,MAAOC,IAAG,KAAM,OAAO,CACvB,MAAOC,gBAAe,KAAM,mBAAmB,CAE/C;AACA,MAAOC,UAAS,KAAM,8BAA8B,CACpD,MAAOC,MAAK,KAAM,0BAA0B,CAC5C,MAAOC,KAAI,KAAM,yBAAyB,CAC1C,MAAOC,SAAQ,KAAM,6BAA6B,CAClD,MAAOC,UAAS,KAAM,wBAAwB,CAC9C,MAAOC,UAAS,KAAM,uBAAuB,CAC7C,MAAOC,MAAK,KAAM,0BAA0B,CAC5C,MAAOC,SAAQ,KAAM,0BAA0B,CAC/C,MAAOC,QAAO,KAAM,gCAAgC,CACpD,MAAOC,GAAE,EAAIC,QAAQ,CAACC,QAAQ,KAAO,2BAA2B,CAChE;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAIA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AAKA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEE;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACE;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACJ;AAEA;AACA;AAEA,MAAOC,KAAI,KAAM,iCAAiC,CAClD,MAAOC,SAAQ,KAAM,6BAA6B,CAClD,MAAOC,SAAQ,KAAM,iCAAiC,CACtD,MAAOC,MAAK,KAAM,iCAAiC,CAAC,2CACpD,GAAMC,KAAI,CAAGnB,QAAQ,CAACoB,UAAU,CAACC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CAAC,CAEjEH,IAAI,CAACI,MAAM,cACT,kCACE,KAAC,SAAS,IAAG,EACT,CACP,CAED;AACA;AACA;AACA;AACA;AACA;AACArB,eAAe,EAAE,CAEjB;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}