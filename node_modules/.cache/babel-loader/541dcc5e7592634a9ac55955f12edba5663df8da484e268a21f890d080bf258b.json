{"ast":null,"code":"import _defineProperty from\"C:/Users/rupap/.vscode/reactapp/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";import _objectSpread from\"C:/Users/rupap/.vscode/reactapp/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _slicedToArray from\"C:/Users/rupap/.vscode/reactapp/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState}from\"react\";// function Form(){\n//     // use of hooks\n//     const [fname,setfname] =  useState(\"\");\n//     const [lname,setlname] =  useState(\"\");\n//     //use of event handling\n// function updatefname(event){\n//     setfname(event.target.value);\n// }\n// function updatelname(event){\n//     setlname(event.target.value);\n// } \n//     return (\n//         <div>\n//             <h1>hello {fname} {lname}</h1>\n//             <form>\n//                 <input name=\"fname\" type=\"text\" onChange={updatefname} placeholder=\"First Name\" value={fname}/>\n//                 <input name=\"lname\" type=\"text\" onChange={updatelname} placeholder=\"Last Name\" value={lname} />\n//             </form>\n//         </div>\n//     )\n// }\n// //?you can do the above method or you can do another simplified method for a code with many functions \n// example of spread operator:\nimport{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";var citrus=[\"lime\",\"lemon\",\"shake\"];var fruits=[\"apple\",\"banana\"].concat(citrus,[\"orange\"]);console.log(fruits);//program for complex state\nfunction Form1(){// use of hooks\nvar _useState=useState({fname:\"\",lname:\"\"}),_useState2=_slicedToArray(_useState,2),fullname=_useState2[0],setfullname=_useState2[1];//use of event handling\nfunction updatefullname(event){//destructuring of const newvalue and const inputvalue\nvar _event$target=event.target,value=_event$target.value,name=_event$target.name;console.log(value);console.log(name);// setfullname(prevalue =>{\n//     if(name==\"fname\"){\n//         return{\n//         fname : value,\n//         lname : prevalue.lname\n//         }\n//     } \n//     else if(name==\"lname\"){\n//         return{\n//             fname : prevalue.fname,\n//             lname : value\n//             }\n//     }\n// });\n//if you don't want to use the if else statements you can use the spread operators below :\nsetfullname(function(prevalue){return _objectSpread(_objectSpread({},prevalue),{},_defineProperty({},name,value));});}return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"h1\",{children:[\"hello  \",fullname.fname,\" \",fullname.lname]}),/*#__PURE__*/_jsxs(\"form\",{children:[/*#__PURE__*/_jsx(\"input\",{name:\"fname\",type:\"text\",onChange:updatefullname,placeholder:\"First Name\"}),/*#__PURE__*/_jsx(\"input\",{name:\"lname\",type:\"text\",onChange:updatefullname,placeholder:\"Last Name\"})]})]});}export default Form1;","map":{"version":3,"names":["React","useState","citrus","fruits","console","log","Form1","fname","lname","fullname","setfullname","updatefullname","event","target","value","name","prevalue"],"sources":["C:/Users/rupap/.vscode/reactapp/src/React Components/complexstate.jsx"],"sourcesContent":["import React ,{useState} from \"react\";\r\n\r\n// function Form(){\r\n//     // use of hooks\r\n//     const [fname,setfname] =  useState(\"\");\r\n//     const [lname,setlname] =  useState(\"\");\r\n    \r\n//     //use of event handling\r\n// function updatefname(event){\r\n//     setfname(event.target.value);\r\n// }\r\n// function updatelname(event){\r\n//     setlname(event.target.value);\r\n// } \r\n\r\n\r\n//     return (\r\n//         <div>\r\n//             <h1>hello {fname} {lname}</h1>\r\n//             <form>\r\n//                 <input name=\"fname\" type=\"text\" onChange={updatefname} placeholder=\"First Name\" value={fname}/>\r\n//                 <input name=\"lname\" type=\"text\" onChange={updatelname} placeholder=\"Last Name\" value={lname} />\r\n//             </form>\r\n//         </div>\r\n\r\n//     )\r\n// }\r\n// //?you can do the above method or you can do another simplified method for a code with many functions \r\n// example of spread operator:\r\nconst citrus =[\"lime\",\"lemon\",\"shake\"]\r\nconst fruits =[\"apple\",\"banana\",...citrus,\"orange\"]\r\nconsole.log(fruits);\r\n\r\n\r\n//program for complex state\r\nfunction Form1(){\r\n    // use of hooks\r\n    const [fullname,setfullname] =  useState({\r\n        fname:\"\",\r\n        lname:\"\"\r\n    });\r\n\r\n     \r\n    \r\n    //use of event handling\r\nfunction updatefullname(event){\r\n    //destructuring of const newvalue and const inputvalue\r\n    const {value,name} = event.target;    \r\n    console.log(value);\r\n    console.log(name);\r\n    // setfullname(prevalue =>{\r\n    //     if(name==\"fname\"){\r\n    //         return{\r\n    //         fname : value,\r\n    //         lname : prevalue.lname\r\n    //         }\r\n    //     } \r\n    //     else if(name==\"lname\"){\r\n    //         return{\r\n    //             fname : prevalue.fname,\r\n    //             lname : value\r\n    //             }\r\n    //     }\r\n    // });\r\n    //if you don't want to use the if else statements you can use the spread operators below :\r\n   \r\n\r\n    setfullname(prevalue =>{\r\n        return {\r\n       ...prevalue,  //spread operator : ...\r\n       [name] : value\r\n        }\r\n    });\r\n}\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h1>hello  {fullname.fname} {fullname.lname}</h1>\r\n            <form>\r\n                <input  name=\"fname\" type=\"text\" onChange={updatefullname} placeholder=\"First Name\" />\r\n                <input  name=\"lname\" type=\"text\" onChange={updatefullname} placeholder=\"Last Name\"  />\r\n            </form>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Form1;"],"mappings":"gWAAA,MAAOA,MAAK,EAAGC,QAAQ,KAAO,OAAO,CAErC;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA,wFACA,GAAMC,OAAM,CAAE,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CACtC,GAAMC,OAAM,EAAG,OAAO,CAAC,QAAQ,SAAID,MAAM,EAAC,QAAQ,EAAC,CACnDE,OAAO,CAACC,GAAG,CAACF,MAAM,CAAC,CAGnB;AACA,QAASG,MAAK,EAAE,CACZ;AACA,cAAgCL,QAAQ,CAAC,CACrCM,KAAK,CAAC,EAAE,CACRC,KAAK,CAAC,EACV,CAAC,CAAC,wCAHKC,QAAQ,eAACC,WAAW,eAO3B;AACJ,QAASC,eAAc,CAACC,KAAK,CAAC,CAC1B;AACA,kBAAqBA,KAAK,CAACC,MAAM,CAA1BC,KAAK,eAALA,KAAK,CAACC,IAAI,eAAJA,IAAI,CACjBX,OAAO,CAACC,GAAG,CAACS,KAAK,CAAC,CAClBV,OAAO,CAACC,GAAG,CAACU,IAAI,CAAC,CACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGAL,WAAW,CAAC,SAAAM,QAAQ,CAAG,CACnB,sCACEA,QAAQ,wBACVD,IAAI,CAAID,KAAK,GAEjB,CAAC,CAAC,CACN,CAII,mBACI,oCACI,sBAAI,SAAO,CAACL,QAAQ,CAACF,KAAK,CAAC,GAAC,CAACE,QAAQ,CAACD,KAAK,GAAM,cACjD,qCACI,cAAQ,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAEG,cAAe,CAAC,WAAW,CAAC,YAAY,EAAG,cACtF,cAAQ,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAEA,cAAe,CAAC,WAAW,CAAC,WAAW,EAAI,GACnF,GACL,CAGd,CAEA,cAAeL,MAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}